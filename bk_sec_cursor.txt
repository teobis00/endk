<style lang="less" scoped>
.endk-section-proyectos {
  width: 100%;
  display: flex;
  justify-content: flex-start;
  align-items: center;
  flex-direction: column;
  padding-top: 100px;
  position: relative;

  .line2 {
    width: 12%;
    height: auto;
    align-self: flex-start;
    position: relative;
    z-index: 20;
    display: inline-block;
    svg {
      display: inline-block;
      vertical-align: top;
      z-index: 20;
      position: relative;
    }
    .fixer {
      width: 100%;
      height: 100%;
      transform: translateY(-100%);
      position: relative;
      h1 {
        position: absolute;
        left: 25%;
        bottom: 16%;
        clip-path: inset(0% 100% 0% 0%);
        transition: clip-path 300ms cubic-bezier(0.65, 0, 0.35, 1);
        will-change: clip-path;
        line-height: 150px;
        @media screen and (min-width: 1440px) {
          font-size: calc(104px + 40%);
          line-height: calc(174px + 20%);
        }
      }
      &.reveal {
        h1 {
          clip-path: inset(0% 0% 0% 0%);
        }
      }
    }

    .info-seccion {
      position: absolute;
      right: -20%;
      top: 100%;
      width: 30vw;
      margin-left: 20%;
      .button {
        max-width: 210px;
        width: 210px;
        float: right;
        margin-top: 27px;
      }
    }
  }

  .galeria-proyectos {
    position: absolute;
    left: 55vw;
    width: 245vw;
    top: 0px;
    height: 100%;
    height: 100vh;
    display: flex;
    justify-content: flex-start;
    .media-realative-proyectos {
      cursor: none;
      width: auto;
      height: 100%;
      position: sticky;
      left: 0px;
      text-align: center;
      img {
        display: inline-block;
        height: 100%;
      }
      .marker {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        border: 1px solid black;
        position: absolute;
        left: 17.2%;
        top: 32%;
        transform: translateY(-25px) translateX(-25px;);
        transition: all 380ms cubic-bezier(0.33, 1, 0.68, 1);
        display: flex;
        justify-content: center;
        align-items: center;
        span {
          width: 12px;
          height: 12px;
          background-color: black;
          display: inline-block;
          border-radius: 50%;
          animation: pulse-black 2s infinite;
          padding: 0px;
          margin: 0px;
          pointer-events: none;
          transform: scale(1);
          transition: all 380ms cubic-bezier(0.33, 1, 0.68, 1);
        }
        &:hover {
          transform: translateY(-25px) translateX(-25px;) scale(1.3);
          background-color: rgba(33, 33, 33, 0.1);
          span {
            background-color: #424242;
            transform: scale(2);
            animation: none;
          }
        }
      }
    }
  }
}

.circle-cursor {
  position: fixed;
  left: 0;
  top: 0;
  pointer-events: none;
  border-radius: 50%;
  &--outer {
    width: 40px;
    height: 40px;
    border: 1px solid rgb(38, 50, 56);
    z-index: 12000;
    opacity: 0.2;
  }
  &--inner {
    width: 5px;
    height: 5px;
    left: -2.5px;
    top: -2.5px;
    z-index: 11000;
    background: #263238;
    svg {
      transform: translateX(-50%) translateY(-50%);
    }
  }
  &--text {
    z-index: 11000;
    font-size: 50px;
    -webkit-text-stroke-width: 2px;
    -webkit-text-stroke-color: black;
    color: transparent;
    font-weight: 700;
    transform-origin: 0 0;
    display: inline-block;
    width: auto;
    white-space: nowrap;
    left: 0px;
    top: 0px;
  }
}

@keyframes pulse-black {
  0% {
    transform: scale(0.95);
    box-shadow: 0 0 0 0 rgba(0, 0, 0, 0.7);
  }

  70% {
    transform: scale(1);
    box-shadow: 0 0 0 10px rgba(0, 0, 0, 0);
  }

  100% {
    transform: scale(0.95);
    box-shadow: 0 0 0 0 rgba(0, 0, 0, 0);
  }
}
</style>

<template>
  <section class="endk-section endk-section-proyectos">
    <div
      ref="cinner"
      class="circle-cursor circle-cursor--inner"
      :style="copacity"
    >
      <div class="csvg" ref="plusvg">
        <v-icon name="plus" scale="1.2" />
      </div>
    </div>
    <div
      ref="couter"
      class="circle-cursor circle-cursor--outer"
      :style="copacity"
    ></div>

    <div ref="ctext" class="circle-cursor circle-cursor--text">
      Mobiliario en obra
    </div>
    <div class="line2">
      <svg
        viewBox="-1 0 100 40"
        fill="blue"
        style="background-color:transparent"
      >
        <path d="M -1,2 L 0,2 L 40,35 L -1,45 z" fill="white" />
        <path
          id="line-path2"
          d="M -1,2 L 0,2 L 40,35"
          fill="transparent"
          stroke="gray"
          stroke-width="1"
        />
        <circle
          cx="40"
          cy="35"
          r="2"
          stroke="black"
          stroke-width="0"
          fill="gray"
          :visibility="visibleSpot2"
        />
      </svg>

      <div class="fixer" :class="{ reveal: reveal }">
        <h1>Proyectos</h1>
      </div>
      <div class="info-seccion" :style="infoSectionStyle">
        <p>
          Desde la fase de diseño de tu proyecto hasta la ejecución e
          implementación, procuramos dar cumplimiento a los plazos requeridos
          por nuestros clientes. La construcción se hará bajo los estandares de
          rápidez y eficacia más exigentes del mercado, principios que nos
          caracterizan como empresa.
        </p>
        <p>
          Otro principio rector es la sostenibilidad, que abarca la adecuada
          elección de materiales y procesos constructivos. Esto se basa en la
          gestión/utilización de materias primas sostenibles, la conservación de
          la energía, la planificación, así como la usabilidad de los
          componentes y todo el ciclo de vida, desde el diseño de este.
        </p>

        <button class="button" :style="buttonSectionStyle">
          Descargar proyectos
        </button>
      </div>
    </div>

    <div class="galeria-proyectos" :style="imageContentStyle">
      <div class="media-realative-proyectos">
        <img
          src="~/assets/img/proyectos.png"
          alt=""
          v-on:mouseover="showCursor = true"
          v-on:mouseleave="showCursor = false"
        />
        <div
          class="marker"
          v-on:mouseover="handleMouseEnter"
          v-on:mouseleave="handleMouseLeave"
          v-on:click="goInterior"
        >
          <span></span>
        </div>
      </div>
    </div>
    <span style="align-self: flex-start; display:none;">
      <p>N: {{ PColleccion }}</p>
      <p>Custom: {{ customAvance }}</p>
      <p>Custom * 2: {{ customAvanceTwice }}</p>
    </span>
  </section>
</template>

<script>
import endkDataScroll from "~/components/endkDataScroll";
import ProgressBar from "progressbar.js";
import { TweenMax } from "gsap";

export default {
  name: "endk-section-inicio",
  data() {
    return {
      customAvance: 0,
      customAvanceTwice: 0,
      clientX: -100,
      clientY: -100,
      isStuck: false,
      outerCursorOriginals: {},
      scursor: true,
      showCursor: false,
    };
  },
  components: {
    endkDataScroll,
  },
  mounted() {
    const cText = this.$refs.ctext;

    TweenMax.to(cText, 0.2, {
      scale: 0,
    });

    const plus = this.$refs.plusvg;

    TweenMax.to(plus, 0.2, {
      scale: 0,
    });

    this.bar = new ProgressBar.Path("#line-path2", {
      easing: "linear",
      duration: 0,
    });

    this.prepareCursor();
  },

  computed: {
    imageContentStyle() {
      const p = this.$store.getters["app/getPSection3"].p - 50;
      const x = p > 0 ? 50 - p : 50;
      const xm = x / 3;
      return { transform: `translateX(${x > -1 ? xm : 0}%)` };
    },
    infoSectionStyle() {
      const p = this.$store.getters["app/getPSection3"].p - 50;
      const x = p > 0 ? 50 - p : 50;
      const o = 1 - (x * 2) / 100;
      return { transform: `translateX(${x > -1 ? x : 0}%)`, opacity: o };
    },
    buttonSectionStyle() {
      const p = this.$store.getters["app/getPSection3"].p - 50;
      const x = p > 0 ? 50 - p : 50;
      const o = 1 - (x * 2) / 100;
      return { transform: `translateX(${x > -1 ? x : 0}%)`, opacity: o };
    },
    copacity() {
      return this.scursor ? { opacity: 1 } : { opacity: 0 };
    },
    percent() {
      return this.PProyectos.p;
    },
    PProyectos() {
      return this.$store.getters["app/getPProyectos"];
    },
    reveal() {
      return this.PColleccion > 159;
    },
    visibleSpot2() {
      return this.PColleccion > 159 ? "visible" : "hidden";
    },
    PColleccion() {
      const percent = this.$store.getters["app/getPColleccion"];
      if (percent.hasOwnProperty("p")) {
        return percent.p;
      }
      return undefined;
    },
  },
  watch: {
    third(n) {
      // console.log("third", n);
    },
    PProyectos(n) {
      // console.log("PProyectos", n);
    },
    PColleccion(n) {
      if (n < 110) {
        this.bar.set(0);
        return;
      }
      if (n > 109) {
        this.customAvance = n - 110;
        this.customAvanceTwice = (this.customAvance * 1.6) / 100;

        if (this.customAvance < 50) {
          this.bar.set(this.customAvanceTwice);
        } else {
          this.bar.set(1);
        }
      }
    },
  },
  methods: {
    goInterior() {
      this.$router.push("/proyectos/detalle");
    },
    handleMouseEnter(e) {
      const outerCursor = this.$refs.couter;
      const outerCursorBox = outerCursor.getBoundingClientRect();

      this.isStuck = true;
      const target = e.currentTarget;
      const box = target.getBoundingClientRect();

      TweenMax.to(outerCursor, 0.2, {
        x: box.left + 2,
        y: box.top + 2,
        width: "45px",
        height: "45px",
        opacity: 1,
        borderColor: "#212121",
      });

      const innerCursor = this.$refs.cinner;

      TweenMax.to(innerCursor, 0.2, {
        backgroundColor: "rgba(0, 0, 0, 0)",
      });

      const plus = this.$refs.plusvg;

      TweenMax.to(plus, 0.2, {
        scale: 1,
      });

      const cText = this.$refs.ctext;

      TweenMax.to(cText, 0.2, {
        scale: 1,
      });
    },
    handleMouseLeave(e) {
      const outerCursor = this.$refs.couter;
      this.isStuck = false;
      TweenMax.to(outerCursor, 0.2, {
        width: 40,
        height: 40,
        opacity: 0.4,
        borderColor: "#263238",
      });

      const innerCursor = this.$refs.cinner;

      TweenMax.to(innerCursor, 0.2, {
        backgroundColor: "rgba(0, 0, 0, 1)",
      });

      const plus = this.$refs.plusvg;

      TweenMax.to(plus, 0.2, {
        scale: 0,
      });

      const cText = this.$refs.ctext;

      TweenMax.to(cText, 0.2, {
        scale: 0,
      });
    },
    prepareCursor() {
      const outerCursor = this.$refs.couter;
      const innerCursor = this.$refs.cinner;
      const cText = this.$refs.ctext;
      const outerCursorBox = outerCursor.getBoundingClientRect();
      let outerCursorSpeed = 0;

      const unveilCursor = () => {
        TweenMax.set(innerCursor, {
          x: this.clientX,
          y: this.clientY,
        });

        TweenMax.set(cText, {
          x: this.clientX,
          y: this.clientY,
        });

        TweenMax.set(outerCursor, {
          x: this.clientX - outerCursorBox.width / 2,
          y: this.clientY - outerCursorBox.height / 2,
        });
        setTimeout(() => {
          outerCursorSpeed = 0.2;
        }, 100);
      };

      document.addEventListener("mousemove", unveilCursor);
      document.addEventListener("mousemove", (e) => {
        this.clientX = e.clientX;
        this.clientY = e.clientY;
      });

      const render = () => {
        TweenMax.set(innerCursor, {
          x: this.clientX,
          y: this.clientY,
        });

        TweenMax.set(cText, {
          x: this.clientX,
          y: this.clientY,
        });

        if (!this.isStuck) {
          TweenMax.to(outerCursor, outerCursorSpeed, {
            x: this.clientX - outerCursorBox.width / 2,
            y: this.clientY - outerCursorBox.height / 2,
          });
        }
        if (this.showCursor) {
          document.removeEventListener("mousemove", unveilCursor);
        }
        requestAnimationFrame(render);
      };
      requestAnimationFrame(render);
    },
  },
};
</script>
